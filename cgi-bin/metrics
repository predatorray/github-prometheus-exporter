#!/usr/bin/env bash

# Copyright (c) 2020 Wenhao Ji <predator.ray@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -euf -o pipefail

readonly DEFAULT_GITHUB_API_SERVER='https://api.github.com'

exec 3>&1

function tmpfile() {
    local tmp_file
    tmp_file="$(mktemp)"
    trap "rm -f ${tmp_file}" EXIT
    echo "${tmp_file}"
}

function log() {
    echo >&2 "$@"
}

function error() {
    log '[ERROR]' "$@"
}

function check_required_env() {
    # check required env variables
    if [[ -z "${GITHUB_REPO:-}" ]]; then
        error "GITHUB_REPO is unset."
        exit 1
    fi
    GITHUB_API_SERVER="${GITHUB_API_SERVER:-${DEFAULT_GITHUB_API_SERVER}}"
}

function check_required_executables() {
    for exe in "$@"; do
        if ! hash "${exe}"; then
            error "command not found: ${exe}"
            exit 1
        fi
    done
}

api_request_duration_gauge_file="$(tmpfile)"
cat > "${api_request_duration_gauge_file}" << EOF
prom-exposit
--name
github_api_request_duration_seconds
--type
gauge
--comment
Github API Request Duration (sec).
--label
repo=${GITHUB_REPO}
EOF

api_request_failure_gauge_file="$(tmpfile)"
cat > "${api_request_failure_gauge_file}" << EOF
prom-exposit
--name
github_api_request_failure
--type
gauge
--comment
Github API Request Failure.
--label
repo=${GITHUB_REPO}
EOF

function curl_github() {
    local path="$1"

    local tmp_http_body="$(tmpfile)"

    SECONDS=0
    local http_status
    http_status="$(curl -s \
        -H "Accept: application/vnd.github.v3+json" \
        "${@:2}" \
        -w "%{http_code}" -o "${tmp_http_body}" \
        "${GITHUB_API_SERVER%/}/${path#/}")"
    cat >> "${api_request_duration_gauge_file}" << EOF
--label
path=${path}
--label
http_status=${http_status}
--value
${SECONDS}
EOF
    if [[ "${http_status}" = 2* ]]; then
        cat "${tmp_http_body}" && rm -f "${tmp_http_body}"
    else
        error "The Githut API request '${path}' failed. (reason = ${http_status})"
        cat >> "${api_request_failure_gauge}" << EOF
--label
path=${path}
--label
http_status=${http_status}
--value
1
EOF
        return 1
    fi
}

function exposit_release_assets_metrics() {
    local assets_download_counter=(
        'prom-exposit' '--name' 'github_assets_download_count' '--type' 'counter' '--comment' 'Github Assets download count.'
        '--label' "repo=${GITHUB_REPO}"
    )
    local assets_size_gauge=(
        'prom-exposit' '--name' 'github_assets_size' '--type' 'gauge' '--comment' 'Github Assets size.'
        '--label' "repo=${GITHUB_REPO}"
    )

    local assets_count=0
    while IFS='' read line; do
        ((++assets_count))

        local asset_array
        eval "asset_array=(${line})"

        local release_id="${asset_array[0]}"
        local tag_name="${asset_array[1]}"
        local target_commitish="${asset_array[2]}"
        local release_name="${asset_array[3]}"
        local draft="${asset_array[4]}"
        local prerelease="${asset_array[5]}"
        local asset_id="${asset_array[6]}"
        local asset_name="${asset_array[7]}"
        local uploader="${asset_array[8]}"
        local content_type="${asset_array[9]}"
        local asset_state="${asset_array[10]}"
        local download_count="${asset_array[11]}"
        local size="${asset_array[12]}"

        local assets_labels=(
            "--label" "release_id=${release_id}"
            "--label" "tag_name=${tag_name}"
            "--label" "target_commitish=${target_commitish}"
            "--label" "release_name=${release_name}"
            "--label" "draft=${draft}"
            "--label" "prerelease=${prerelease}"
            "--label" "asset_id=${asset_id}"
            "--label" "asset_name=${asset_name}"
            "--label" "uploader=${uploader}"
            "--label" "content_type=${content_type}"
            "--label" "asset_state=${asset_state}"
        )

        assets_download_counter+=(
            "${assets_labels[@]}"
            "--value" "${download_count}" 
        )
        assets_size_gauge+=(
            "${assets_labels[@]}"
            "--value" "${size}" 
        )
    done < <(curl_github "/repos/${GITHUB_REPO}/releases" | jq -rc '.[] |
        .id as $id |
        .tag_name as $tag_name |
        .target_commitish as $target_commitish |
        .name as $name |
        .draft as $draft |
        .prerelease as $prerelease |
        .assets[] |
        [$id, $tag_name, $target_commitish, $name, $draft, $prerelease, .id, .name, .uploader.login, .content_type, .state, .download_count, .size] |
        @sh')
    
    if [[ "${assets_count}" -gt 0 ]]; then
        "${assets_download_counter[@]}" >&3
        "${assets_size_gauge[@]}" >&3
    fi

    prom-exposit --name 'github_assets_count' --type 'counter' --comment 'Github Assets count.' --label "repo=${GITHUB_REPO}" \
        --value "${assets_count}" >&3
}

function exposit_repo_stars() {
    local stars
    stars="$(curl_github "/repos/${GITHUB_REPO}/stargazers" | jq -rc 'length')"
    prom-exposit --name 'github_repo_stars' --type 'counter' --comment 'Github Repository Stars' --label "repo=${GITHUB_REPO}" \
        --value "${stars}" >&3
}

function exposit_api_requests() {
    readarray -t api_request_duration_gauge < "${api_request_duration_gauge_file}"
    "${api_request_duration_gauge[@]}" >&3

    readarray -t api_request_failure_gauge < "${api_request_failure_gauge_file}"
    "${api_request_failure_gauge[@]}" >&3

    rm -f "${api_request_duration_gauge_file}"
    rm -f "${api_request_failure_gauge_file}"
}

function exposit_metrics() {
    check_required_executables jq curl prom-exposit
    check_required_env
    case "${REQUEST_METHOD:-GET}" in
        HEAD)
            echo 'Content-Type: text/plain; version=0.0.4'
            echo
            ;;
        GET)
            echo 'Content-Type: text/plain; version=0.0.4'
            echo
            exposit_release_assets_metrics || true
            exposit_repo_stars || true
            exposit_api_requests || true
            ;;
        *)
            echo 'Status: 405 Method Not Allowed'
            echo
            ;;
    esac
}

exposit_metrics
